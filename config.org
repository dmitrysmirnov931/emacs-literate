#+title: Emacs literate config
#+date: 2024
#+startup: show2levels

* Settings without corresponding packages
Clean up the UI and enhance some basic defaults
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :diminish which-key-mode
  :config
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode t)
  (which-key-mode t)
  (global-hl-line-mode t)
  (show-paren-mode t)

  (setq ring-bell-function 'ignore
        frame-resize-pixelwise t)
  (setq show-paren-delay 0)
  (setq use-short-answers t)
  (setq confirm-nonexistent-file-or-buffer nil)
  (setq scroll-margin 0
        scroll-conservatively 101
        scroll-preserve-screen-position t
        auto-window-vscroll nil)
  (setq inhibit-startup-screen t)
  (setq enable-recursive-minibuffers t)
  ;; Hide commands in M-x which do not work in the current mode
  (setq read-extended-command-predicate #'command-completion-default-include-p)
  :init
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  (setq completion-cycle-threshold 3
        tab-always-indent 'complete)
  (require-theme 'modus-themes)
  (setq modus-themes-bold-constructs t
        modus-themes-italic-constructs t)
  (load-theme 'modus-operandi-tinted)
  ;; Remove major mode and VC indicator from the mode-line
  (setq-default mode-line-format (delq 'mode-line-modes mode-line-format))
  (setq-default mode-line-format (delete '(vc-mode vc-mode) mode-line-format))
  ;; Disable ispell
  (setq text-mode-ispell-word-completion nil)
  ;; Backup configuration
  (setq backup-directory-alist `(("." . "~/.config/emacs/saves"))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
  ;; Global keymaps
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  )
#+end_src

* Configuration for built-in packages
Since we're using use-package as our package management system, we
might as well try to organize under the same syntax as much as
possible to keep the configuration consistent. The option
~use-package-always-ensure~ is turned on in ~init.el~, so we'll add
~:ensure nil~ when configuring the built-in packages.
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
tune it down a little bit
#+begin_src emacs-lisp
(use-package mwheel
  :ensure nil
  :config (setq mouse-wheel-scroll-amount '(2 ((shift) .1))
                mouse-wheel-progressive-speed nil))
#+end_src

** Setting up some frame defaults
Maximize the frame by default on start-up. Set the font to size 15
#+begin_src emacs-lisp
(use-package frame
  :preface
  (defun my-set-default-font ()
    (interactive)
    (set-face-attribute 'default nil :family "Iosevka" :height 170 :weight 'normal)
    (set-face-attribute 'variable-pitch nil :family "Iosevka Aile" :height 170 :weight 'normal))

  :ensure nil
  :config
  (setq initial-frame-alist '((fullscreen . maximized)))
  (my-set-default-font))
#+end_src

** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences
#+begin_src emacs-lisp
(use-package ediff
  :ensure nil
  :config
  (setq ediff-window-setup-function #'ediff-setup-windows-plain
        ediff-split-window-function #'split-window-horizontally))
#+end_src

** Auto-pairing quotes and parentheses etc.
#+begin_src emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook (prog-mode . electric-pair-mode)
  :config
  ;; dont insert `<>` in org-mode to make org-tempo work
  (add-hook 'org-mode-hook (lambda ()
                             (setq-local electric-pair-inhibit-predicate
                                         `(lambda (c)
                                            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))
#+end_src

** Clean up whitespaces on save
#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+end_src

** Dired tweaks
Delete intermediate buffers when navigating through dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :config
  (setq delete-by-moving-to-trash t)
  (eval-after-load "dired"
    #'(lambda ()
        (put 'dired-find-alternate-file 'disabled nil)
        (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src

* Third-party-packages
Normally, we need tool-bar-mode add ~:ensure t~ to tell ~use-package~ to download packages
when it's not available. But since we've added ~use-package-always-ensure~ in
~early-init.el~, we can omit it
** Clean config folder
no-littering helps keeping ~/.config/emacs clean
#+begin_src emacs-lisp
(use-package no-littering)
#+end_src

** Evil keybindings
Apart from vi emulation, set ~:q~ and ~:wq~ to be killing current buffer, instead
of killing the frame or subsequently killing Emacs
#+begin_src emacs-lisp
(use-package evil
  :diminish undo-tree-mode
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-split-window-below t
        evil-vsplit-window-right t
        evil-want-Y-yank-to-eol t
        evil-respect-visual-line-mode t
        evil-mode-line-format nil)
  :hook (after-init . evil-mode)
  :preface
  (defun my-save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  :config
  (add-hook 'org-mode-hook
            (lambda () (setq evil-auto-indent nil)))
  (with-eval-after-load 'evil-maps
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (evil-ex-define-cmd "q" #'kill-this-buffer)
  (evil-ex-define-cmd "wq" #'my-save-and-kill-this-buffer))
#+end_src

Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+begin_src emacs-lisp
(use-package evil-collection
  :diminish evil-collection-unimpaired-mode
  :after evil
  :config
  (setq evil-collection-setup-minibuffer t)
  (evil-collection-init))
#+end_src

Emulates tpope's vim commentary package (Use ~gcc~ to comment out a line,
~gc~ to comment out the target of a motion (for example, ~gcap~ to
comment out a paragraph), ~gc~ in visual mode to comment out the
selection etc.)
#+begin_src emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_src

** Magit
Tell magit to automatically put us in vi-insert-mode when commiting a change
#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+end_src

** Searching/sorting enhancements and autocompletion
Vertico provides a performant and minimalistic vertical completion UI based
on the default completion system
#+begin_src emacs-lisp
(use-package vertico
  :config
  (setq vertico-count 20
        vertico-cycle t)
  :init
  (vertico-mode))
(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-diretory-tidy))
#+end_src

Orderless provides a completion style that divides thte pattern into
space-separated components and matches candidates that match all of the
components in any order
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

Corfu enhances in-buffer completion with a small completion popup
It is a minimalistic buffer completion counterpart of the ~Vertico~
minibuffer UI
#+begin_src emacs-lisp
(use-package corfu
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-separtor ?\s)
  :init
  (global-corfu-mode))
#+end_src

Cape provides Completion At Point Extensions which can be used in
combination with ~Corfu~
#+begin_src emacs-lisp
(use-package cape
  :bind ("C-c p" . cape-prefix-map)
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src

Marginalia adds annotations to the minibuffer completions
#+begin_src emacs-lisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
#+end_src

** Consult
Consult provides search and navigation commands based on the Emacs
function completing-read
#+begin_src emacs-lisp
(use-package consult
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . affe-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . affe-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; This improves the register preview for `consult-register',
  ;; `consult-register-load', `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<"))
#+end_src

Affe is an asynchronous fuzzy finder similar to ~fzf~
#+begin_src emacs-lisp
(use-package affe
  :config
  (defun affe-orderless-regexp-compiler (input _type _ignorecase)
    (setq input (cdr (orderless-compile input)))
    (cons input (apply-partially #'orderless--highlight input t)))
  (setq affe-regexp-compiler #'affe-orderless-regexp-compiler))
#+end_src

** Embark
Embark makes it easy to choose a command to run based on what is near point,
both during a minibuffer completion session and in normal buffers
#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Programming languages setup
Eglot is a built-in LSP server
#+begin_src emacs-lisp
(use-package eldoc-box
  :diminish eldoc-mode eldoc-box-hover-mode eldoc-box-hover-at-point-mode)

(use-package eglot
  :bind (:map eglot-mode-map
              ("C-c r" . eglot-rename)
              ("C-c R" . xref-find-references))
  :hook ((( python-mode python-ts-mode ) . eglot-ensure))
  :config
  (setq completion-category-overrides '((eglot (styles orderless))))
  (add-to-list 'eglot-server-programs '((python-mode python-ts-mode) . ("pyright-langserver" "--stdio")))
  (add-to-list 'eglot-ignored-server-capabilities :hoverProvider)
  (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-at-point-mode t)
  (setq eglot-autoshutdown t
        eglot-events-buffer-size 0
        eldoc-echo-area-use-multiline-p nil))

(use-package consult-eglot
  :bind (:map eglot-mode-map
              ("C-c s" . consult-eglot-symbols))
  :after consult eglot)
#+end_src

Some nicities like breadcrumbs and python tools
#+begin_src emacs-lisp

(use-package breadcrumb
  :config
  (breadcrumb-mode t))

(use-package pyvenv)

(use-package python-pytest)
#+end_src

Ibuffer-project provides ibuffer filtering and sorting functions to group buffers by
custom functions or regexps
By default buffers are grouped by project or by default directory
#+begin_src emacs-lisp
(use-package ibuffer-project
  :config
  (add-hook
   'ibuffer-hook
   (lambda ()
     (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
     (unless (eq ibuffer-sorting-mode 'project-file-relative)
       (ibuffer-do-sort-by-project-file-relative))))
  (custom-set-variables
   '(ibuffer-formats
     '((mark modified read-only locked " "
             (name 18 18 :left :elide)
             " "
             (size 9 -1 :right)
             " "
             (mode 16 16 :left :elide)
             " " project-file-relative)))))
#+end_src

Avy is a package for jumping to visible text using a char-based decision tree
#+begin_src emacs-lisp
(use-package avy
  :bind
  (("s-j" . avy-goto-char-timer))
  :config
  (setq avy-all-windows 'all-frames))
#+end_src

** Diminish
Diminish adds a ~:diminish~ keyword to the ~use-package~ macro to hide unimportant minor modes
from the mode-line
#+begin_src emacs-lisp
(use-package diminish
  :demand t)
#+end_src

** Comment tags
Highlight TODO, FIXME etc.
#+begin_src emacs-lisp
(use-package comment-tags
  :config
  (autoload 'comment-tags-mode "comment-tags-mode")
  (setq comment-tags-keymap-prefix (kbd "C-c t"))
  (with-eval-after-load "comment-tags"
    (setq comment-tags-keyword-faces
          `(("TODO" . ,(list :weight 'bold :foreground "#28ABE3"))
            ("FIXME" . ,(list :weight 'bold :foreground "#DB3340"))
            ("BUG" . ,(list :weight 'bold :foreground "#DB3340"))
            ("HACK" . ,(list :weight 'bold :foreground "#E8B71A"))
            ("DONE" . ,(list :weight 'bold :foreground "#1FDA9A"))))
    (setq comment-tags-comment-start-only t
          comment-tags-require-colon t
          comment-tags-case-sensitive t
          comment-tags-show-faces t
          comment-tags-lighter nil))
  (add-hook 'prog-mode-hook 'comment-tags-mode))
#+end_src

* Org mode
#+begin_src emacs-lisp
(use-package org
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode))
  :config
  (setq org-src-preserve-indentation t)
  (setq org-agenda-files '("~/org"))
  ;; When a TODO is set to a done state, record a timestamp
  (setq org-log-done 'time)
  (setq org-return-follows-link  t)
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (setq org-todo-keywords
        '((sequence "TODO(t)" "PLANNING(p)" "IN-PROGRESS(i@/!)" "VERIFYING(v!)" "BLOCKED(b@)"  "|" "DONE(d!)" "OBE(o@!)" "WONT-DO(w@/!)" )
          ))
  (setq org-capture-templates
        '(
          ("l" "Work Log Entry"
           entry (file+datetree "~/org/work-log.org")
           "* %?"
           :empty-lines 0)
          ("n" "Note"
           entry (file+headline "~/org/notes.org" "Random Notes")
           "** %?"
           :empty-lines 0)
          ("t" "General To-Do"
           entry (file+headline "~/org/todos.org" "General Tasks")
           "* TODO [#B] %?\n:Created: %T\n "
           :empty-lines 0)
          ("c" "Code To-Do"
           entry (file+headline "~/org/todos.org" "Code Related Tasks")
           "* TODO [#B] %?\n:Created: %T\n%i\n%a\nProposed Solution: "
           :empty-lines 0)
          ))
  )

(use-package org-super-agenda
  :hook (org-agenda-mode . org-super-agenda-mode))

(use-package org-modern
  :config
  (modify-all-frames-parameters
   '((right-divider-width . 5)
     (internal-border-width . 5)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))
  ;; Edit settings
  (setq org-auto-align-tags nil
        org-tags-column 0
        org-catch-invisible-edits 'show-and-error
        org-special-ctrl-a/e t
        org-insert-heading-respect-content t
        ;; Org styling, hide markup etc.
        org-hide-emphasis-markers t
        org-pretty-entities t
        ;; Agenda styling
        org-agenda-tags-column 0
        org-agenda-block-separator ?─
        org-agenda-time-grid '((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
        org-agenda-current-time-string "◀── now ─────────────────────────────────────────────────")
  ;; Ellipsis styling
  (setq org-ellipsis "…")
  (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
  (set-face-attribute 'org-modern-symbol nil :family "Iosevka" :height 210 :weight 'normal)
  (with-eval-after-load 'org (global-org-modern-mode)))
#+end_src
